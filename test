import os
import re
import argparse
from termcolor import colored

def scan_java_websockets(start_path):
    patterns = [
        r"@ServerEndpoint\(",  # Java EE WebSocket server endpoint
        r"\bSession\b",        # WebSocket Session
        r"@OnOpen\b",          # Opening WebSocket connection
        r"@OnMessage\b",       # Receiving WebSocket message
        r"@OnClose\b",         # Closing WebSocket connection
        r"@OnError\b",         # WebSocket error handling
        r"ws://",              # Unsecure WebSocket URL
        r"wss://",             # Secure WebSocket URL
        r"@EnableWebSocket\b",               # Enable WebSocket support
        r"@EnableWebSocketMessageBroker\b",  # Enable WebSocket message broker
        r"\bWebSocketHandler\b",             # WebSocket message handling
        r"\bWebSocketConfigurer\b",          # WebSocket configuration
        r"\bStompEndpointRegistry\b",        # STOMP endpoint registration
    ]
    compiled_patterns = [re.compile(pattern) for pattern in patterns]

    findings = []

    def search_file(file_path):
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
            lines = file.readlines()
            for i, line in enumerate(lines):
                for pattern in compiled_patterns:
                    if pattern.search(line):
                        findings.append((i + 1, line.strip(), file_path))

    for root, dirs, files in os.walk(start_path):
        for file in files:
            if file.endswith(".java"):  # Targeting Java files
                file_path = os.path.join(root, file)
                search_file(file_path)

    return findings

def main():
    parser = argparse.ArgumentParser(description='Scan Java code for WebSocket usage, including Spring implementations.')
    parser.add_argument('start_path', type=str, help='The start path of the Java project to scan.')
    args = parser.parse_args()

    findings = scan_java_websockets(args.start_path)
    if findings:
        for line_number, line_content, file_path in findings:
            # Colored part only includes the alert phrase
            alert_message = colored("WebSocket technology detected: ", 'red')
            # Rest of the message in default color, including dynamic line number and file path
            details_message = f"{line_content} on line {line_number} in {file_path}"
            print(f"{alert_message}{details_message}")
    else:
        print("No WebSocket usage found.")

if __name__ == '__main__':
    main()
