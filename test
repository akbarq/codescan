import subprocess
import os
import re
import argparse

def decompile_apk(jadx_path, apk_path, output_dir="decompiled"):
    """
    Decompiles the APK to Java/Kotlin source code using jadx.
    """
    try:
        subprocess.run([jadx_path, "-d", output_dir, apk_path], check=True)
        print(f"Decompilation complete. Decompiled code at: {output_dir}")
    except subprocess.CalledProcessError as e:
        print(f"Error during decompilation: {e}")
        exit(1)
    return output_dir

def scan_for_websockets(decompiled_path):
    """
    Scans the decompiled source code for WebSocket usage.
    """
    websocket_patterns = [
        r"import\s+.*WebSocket;",  # General WebSocket import
        r"OkHttpClient\(\)\.newWebSocket",  # OkHttp WebSocket creation
        r"new\s+WebSocketListener",  # WebSocketListener creation
        r"ws://",  # WebSocket plain text protocol
        r"wss://"  # WebSocket Secure protocol
    ]
    findings = []

    for root, _, files in os.walk(decompiled_path):
        for file in files:
            if file.endswith(".java") or file.endswith(".kt"):
                file_path = os.path.join(root, file)
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    for pattern in websocket_patterns:
                        if re.search(pattern, content, re.IGNORECASE):
                            findings.append(file_path)
                            break  # Avoid duplicating findings for the same file

    return findings

def report_findings(findings):
    """
    Reports the findings in a simple format.
    """
    if findings:
        print("WebSocket usage found in the following files:")
        for file in findings:
            print(f"- {file}")
    else:
        print("No WebSocket usage found.")

def parse_arguments():
    """
    Parses command-line arguments.
    """
    parser = argparse.ArgumentParser(description='Decompile APK and scan for WebSocket usage.')
    parser.add_argument('jadx_path', type=str, help='Path to the jadx binary')
    parser.add_argument('apk_path', type=str, help='Path to the APK file to be decompiled')
    return parser.parse_args()

def main():
    args = parse_arguments()
    output_dir = "decompiled"
    decompiled_path = decompile_apk(args.jadx_path, args.apk_path, output_dir)
    findings = scan_for_websockets(decompiled_path)
    report_findings(findings)

if __name__ == "__main__":
    main()
